// <auto-generated />
using System;
using Aggregator.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Aggregator.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(UnitOfWork))]
    partial class UnitOfWorkModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Aggregator.Domain.Companies.CompanyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.ToTable("companies", "companies");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 17, 15, 29, 19, 886, DateTimeKind.Unspecified).AddTicks(2674), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Let's clean up your shit",
                            LogoUrl = "https://comenian.org/wp-content/uploads/2023/04/istockphoto-1340208950-612x612-1.jpeg",
                            Name = "House Cleaning"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 17, 15, 29, 19, 886, DateTimeKind.Unspecified).AddTicks(2676), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Enjoy our pizza",
                            Name = "Cooking pizza"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 17, 15, 29, 19, 886, DateTimeKind.Unspecified).AddTicks(2677), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Our hands are not for boredom",
                            LogoUrl = "https://media.istockphoto.com/id/1463132842/vector/wrench-in-hand-screwdriver-brush-repair-and-service-sign.jpg?s=612x612&w=0&k=20&c=RBWR7k6jh09E9UDXOqviT9hAaex4qmrqX-6gYPnEGbk=",
                            Name = "Handyman"
                        });
                });

            modelBuilder.Entity("Aggregator.Domain.Services.ServiceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_type_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_services");

                    b.HasIndex("ServiceTypeId")
                        .HasDatabaseName("ix_services_service_type_id");

                    b.HasIndex("CompanyId", "ServiceTypeId")
                        .IsUnique()
                        .HasDatabaseName("ix_services_company_id_service_type_id");

                    b.ToTable("services", "services");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CompanyId = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 17, 15, 29, 19, 886, DateTimeKind.Unspecified).AddTicks(2694), new TimeSpan(0, 0, 0, 0, 0)),
                            Data = "{}",
                            Description = "Let's clean up your problem",
                            Name = "Let's clean",
                            ServiceTypeId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CompanyId = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 17, 15, 29, 19, 886, DateTimeKind.Unspecified).AddTicks(2695), new TimeSpan(0, 0, 0, 0, 0)),
                            Data = "{}",
                            Name = "Delivery",
                            ServiceTypeId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CompanyId = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 17, 15, 29, 19, 886, DateTimeKind.Unspecified).AddTicks(2696), new TimeSpan(0, 0, 0, 0, 0)),
                            Data = "{}",
                            Name = "Super Cleaning",
                            ServiceTypeId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CompanyId = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 17, 15, 29, 19, 886, DateTimeKind.Unspecified).AddTicks(2697), new TimeSpan(0, 0, 0, 0, 0)),
                            Data = "{}",
                            Name = "Super Delivery",
                            ServiceTypeId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CompanyId = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 17, 15, 29, 19, 886, DateTimeKind.Unspecified).AddTicks(2699), new TimeSpan(0, 0, 0, 0, 0)),
                            Data = "{}",
                            Name = "Super Kitchen",
                            ServiceTypeId = 3L
                        });
                });

            modelBuilder.Entity("Aggregator.Domain.Services.ServiceTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_service_types");

                    b.ToTable("service_types", "services");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 17, 15, 29, 19, 886, DateTimeKind.Unspecified).AddTicks(2641), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Cleaning"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 17, 15, 29, 19, 886, DateTimeKind.Unspecified).AddTicks(2650), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Delivery"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 17, 15, 29, 19, 886, DateTimeKind.Unspecified).AddTicks(2651), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Kitchen"
                        });
                });

            modelBuilder.Entity("Aggregator.Domain.Services.ServiceEntity", b =>
                {
                    b.HasOne("Aggregator.Domain.Companies.CompanyEntity", "Company")
                        .WithMany("Services")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_services_companies_company_id");

                    b.HasOne("Aggregator.Domain.Services.ServiceTypeEntity", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_services_service_types_service_type_id");

                    b.Navigation("Company");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Aggregator.Domain.Companies.CompanyEntity", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
