// <auto-generated />
using System;
using Aggregator.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Aggregator.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(UnitOfWork))]
    [Migration("20240618133521_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Aggregator.Domain.Companies.CompanyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.ToTable("companies", "companies");
                });

            modelBuilder.Entity("Aggregator.Domain.Services.ServiceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_type_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_services");

                    b.HasIndex("ServiceTypeId")
                        .HasDatabaseName("ix_services_service_type_id");

                    b.HasIndex("CompanyId", "ServiceTypeId")
                        .IsUnique()
                        .HasDatabaseName("ix_services_company_id_service_type_id");

                    b.ToTable("services", "services");
                });

            modelBuilder.Entity("Aggregator.Domain.Services.ServiceTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_service_types");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_service_types_name");

                    b.ToTable("service_types", "services");
                });

            modelBuilder.Entity("Aggregator.Domain.Services.ServiceEntity", b =>
                {
                    b.HasOne("Aggregator.Domain.Companies.CompanyEntity", "Company")
                        .WithMany("Services")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_services_companies_company_id");

                    b.HasOne("Aggregator.Domain.Services.ServiceTypeEntity", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_services_service_types_service_type_id");

                    b.OwnsOne("Aggregator.Domain.Services.ServiceDataNode", "ServiceData", b1 =>
                        {
                            b1.Property<long>("ServiceEntityId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<string>("ImageUrl")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal?>("Price")
                                .HasColumnType("numeric");

                            b1.HasKey("ServiceEntityId")
                                .HasName("pk_services");

                            b1.ToTable("services", "services");

                            b1.ToJson("service_data");

                            b1.WithOwner()
                                .HasForeignKey("ServiceEntityId")
                                .HasConstraintName("fk_services_services_service_entity_id");

                            b1.OwnsMany("Aggregator.Domain.Services.ServiceDataNode.Children#ServiceDataNode", "Children", b2 =>
                                {
                                    b2.Property<long>("ServiceDataNodeServiceEntityId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .HasColumnType("text");

                                    b2.Property<string>("ImageUrl")
                                        .HasColumnType("text");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<decimal?>("Price")
                                        .HasColumnType("numeric");

                                    b2.HasKey("ServiceDataNodeServiceEntityId", "Id")
                                        .HasName("pk_services");

                                    b2.ToTable("services", "services");

                                    b2.ToJson("service_data");

                                    b2.WithOwner()
                                        .HasForeignKey("ServiceDataNodeServiceEntityId")
                                        .HasConstraintName("fk_services_services_service_data_node_service_entity_id");
                                });

                            b1.Navigation("Children");
                        });

                    b.Navigation("Company");

                    b.Navigation("ServiceData")
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Aggregator.Domain.Companies.CompanyEntity", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
